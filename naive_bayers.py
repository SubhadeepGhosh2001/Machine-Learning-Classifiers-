# -*- coding: utf-8 -*-
"""Naive Bayers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VJohQFw1e_05Wl0bESdUjRPX2EcFqT5E
"""

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB  # Fixed typo
from sklearn.metrics import accuracy_score, confusion_matrix,precision_score,recall_score,f1_score
from sklearn.datasets import load_breast_cancer
import numpy as np

# Load dataset
cancer = load_breast_cancer()
X = cancer.data  # Use consistent variable name
y = cancer.target

print(X.shape)
print(y.shape)

# Split the data
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train the model
model = GaussianNB()
model.fit(x_train, y_train)

# Predict
y_pred = model.predict(x_test)

# Evaluate
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

# Calculate and print precision, recall, and F1-score
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1-score: {f1}")

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA

# Plot the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,
            xticklabels=cancer.target_names, yticklabels=cancer.target_names)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

# Visualize the classification outcome (using PCA for dimensionality reduction for plotting)
pca = PCA(n_components=2)
X_pca = pca.fit_transform(x_test)

plt.figure(figsize=(8, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y_pred, cmap='viridis', marker='o', label='Predicted')
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y_test, cmap='coolwarm', marker='x', label='True')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('Classification Outcome (PCA)')
plt.legend()
plt.show()