# -*- coding: utf-8 -*-
"""knn_without_function.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kloafxdu_awCRy2MDEo-TanlTzzjAVyr
"""

import numpy as np
from collections import Counter

# ----------------------------
# Step 1: Create training data
# ----------------------------
X_train = np.array([
    [1, 2], [2, 3], [3, 3],  # Class 0
    [6, 5], [7, 7], [8, 6]   # Class 1
])
y_train = np.array([0, 0, 0, 1, 1, 1])

# ----------------------------
# Step 2: Define KNN function
# ----------------------------
def knn_predict(X_train, y_train, test_sample, k=3):
    # Compute Euclidean distances
    distances = np.linalg.norm(X_train - test_sample, axis=1)

    # Get indices of k nearest neighbors
    k_indices = np.argsort(distances)[:k]

    # Get the labels of those neighbors
    k_labels = y_train[k_indices]

    # Majority vote
    most_common = Counter(k_labels).most_common(1)
    return most_common[0][0]

# ----------------------------
# Step 3: Test the function
# ----------------------------
test_points = np.array([[2, 2], [7, 6], [4, 3]])
for point in test_points:
    prediction = knn_predict(X_train, y_train, point, k=3)
    print(f"Point {point} â†’ Class {prediction}")