# -*- coding: utf-8 -*-
"""Minimum Distance Classifies.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11HS0jj0xP0PfMP7rek7BeTRiwEcEmHf_
"""

import numpy as np

# ----------------------------
# Step 1: Prepare training data
# ----------------------------
# Example: 2D features for 2 classes
class1_train = np.array([[1, 2], [2, 3], [3, 3]])  # Class 0
class2_train = np.array([[6, 5], [7, 7], [8, 6]])  # Class 1

# Combine data
X_train = np.vstack((class1_train, class2_train))
y_train = np.array([0] * len(class1_train) + [1] * len(class2_train))

# ----------------------------
# Step 2: Compute class means
# ----------------------------
classes = np.unique(y_train)
class_means = {}
for c in classes:
    class_means[c] = np.mean(X_train[y_train == c], axis=0)

print("Class means:", class_means)

# ----------------------------
# Step 3: Define classification function
# ----------------------------
def minimum_distance_classifier(sample, class_means):
    min_distance = float('inf')
    predicted_class = None
    for c, mean_vec in class_means.items():
        distance = np.linalg.norm(sample - mean_vec)  # Euclidean distance
        if distance < min_distance:
            min_distance = distance
            predicted_class = c
    return predicted_class

# ----------------------------
# Step 4: Test on new samples
# ----------------------------
test_samples = np.array([[2, 2], [7, 6], [4, 3]])
for sample in test_samples:
    pred = minimum_distance_classifier(sample, class_means)
    print(f"Sample {sample} â†’ Class {pred}")